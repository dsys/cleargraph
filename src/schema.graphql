# import PhoneNumber from "./generated/prisma.graphql"

enum ETHEREUM_NETWORK {
  MAINNET
  ROPSTEN
  KOVAN
  RINKEBY
}

type Query {
  phoneNumber(hashedPhoneNumber: String!): PhoneNumber

  ethereumGasPrice(network: ETHEREUM_NETWORK): String!
  ethereumBlockNumber(network: ETHEREUM_NETWORK): Int!

  ethereumBlock(hash: String, number: Int, network: ETHEREUM_NETWORK): EthereumBlock
  ethereumTransaction(hash: String!, network: ETHEREUM_NETWORK): EthereumTransaction
  ethereumAddress(hash: String!, network: ETHEREUM_NETWORK): EthereumAddress
}

type Mutation {
  startPhoneNumberVerification(
    phoneNumber: String!
  ): Ack

  updatePhoneNumber(
    phoneNumber: String!
    verificationCode: String!
    address: String!
  ): PhoneNumber

  deletePhoneNumber(
    phoneNumber: String!
    verificationCode: String!
  ): Ack

  sendRawTransaction(
    data: String!
    network: ETHEREUM_NETWORK
  ): EthereumTransaction
}

type Ack {
  ok: Boolean
}

type EthereumAddress {
  network: ETHEREUM_NETWORK!
  hash: String!
  balance: String!
  transactionCount: Int!
}

type EthereumTransaction {
  network: ETHEREUM_NETWORK!
  hash: String!
  nonce: Int!
  block: EthereumBlock
  transactionIndex: Int!
  from: EthereumAddress
  to: EthereumAddress
  value: String!
  gas: Int!
  gasPrice: String!
  input: String!
}

type EthereumBlock {
  network: ETHEREUM_NETWORK!
  hash: String!
  number: Int!
  parent: EthereumBlock
  nonce: String!
  sha3Uncles: String!
  logsBloom: String!
  transactionsRoot: String!
  stateRoot: String!
  miner: EthereumAddress!
  difficulty: String!
  totalDifficulty: String!
  size: Int!
  extraData: String!
  gasLimit: Int!
  gasUsed: Int!
  timestamp: Int!
  transactions: [EthereumTransaction!]!
  transactionCount: Int!
  uncles: [EthereumBlock!]!
}

type PhoneNumber {
  hashedPhoneNumber: String!
  address: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  ethereumAddress(network: ETHEREUM_NETWORK): EthereumAddress
}
