# import PhoneNumber from "./generated/prisma.graphql"

scalar JSON
scalar BigNumber
scalar HexValue
scalar EthereumAddressString
scalar EthereumBlockHashHexValue
scalar EthereumTransactionHashHexValue

interface Ack {
  ok: Boolean
  message: String
}

enum ETHEREUM_NETWORK {
  MAINNET
  ROPSTEN
  KOVAN
  RINKEBY
}

enum ETHEREUM_UNIT {
  BABBAGE
  ETHER
  FEMTOETHER
  FINNEY
  GETHER
  GRAND
  GWEI
  KETHER
  KWEI
  LOVELACE
  METHER
  MICRO
  MICROETHER
  MILLI
  MILLIETHER
  NANO
  NANOETHER
  PICOETHER
  SHANNON
  SZABO
  TETHER
  WEI
}

enum ETHEREUM_CONTRACT_STANDARD {
  ERC_20
  ERC_721
  ERC_725
}

type Query {
  phoneNumber(hashedPhoneNumber: String!): PhoneNumber

  ethereumValue(value: BigNumber!, unit: ETHEREUM_UNIT): EthereumValue
  ethereumGasPrice(network: ETHEREUM_NETWORK): EthereumValue

  ethereumBlockNumber(network: ETHEREUM_NETWORK): Int

  ethereumBlock(
    hash: EthereumBlockHashHexValue
    number: Int
    network: ETHEREUM_NETWORK
  ): EthereumBlock

  ethereumTransaction(
    hash: EthereumTransactionHashHexValue!
    network: ETHEREUM_NETWORK
  ): EthereumTransaction

  ethereumAddress(
    address: EthereumAddressString!
    network: ETHEREUM_NETWORK
  ): EthereumAddress

  ethereumContract(
    address: EthereumAddressString!
    network: ETHEREUM_NETWORK
    interface: EthereumContractInterfaceInput!
  ): EthereumGenericContract

  ethereumTokenContract(
    address: EthereumAddressString!
    network: ETHEREUM_NETWORK
    interface: EthereumContractInterfaceInput
  ): EthereumTokenContract

  ethereumIdentityContract(
    address: EthereumAddressString!
    network: ETHEREUM_NETWORK
    interface: EthereumContractInterfaceInput
  ): EthereumIdentityContract
}

type Mutation {
  sendRawEthereumTransaction(
    input: SendRawEthereumTransactionInput!
  ): SendRawEthereumTransactionPayload

  startPhoneNumberVerification(
    input: StartPhoneNumberVerificationInput!
  ): StartPhoneNumberVerificationPayload

  checkPhoneNumberVerification(
    input: CheckPhoneNumberVerificationInput!
  ): CheckPhoneNumberVerificationPayload

  updatePhoneNumber(input: UpdatePhoneNumberInput!): UpdatePhoneNumberPayload
  deletePhoneNumber(input: DeletePhoneNumberInput!): DeletePhoneNumberPayload

  checkUsernameAvailable(
    input: CheckUsernameAvailableInput!
  ): CheckUsernameAvailablePayload

  createIdentityContract(
    input: CreateIdentityContractInput!
  ): CreateIdentityContractPayload
}

type EthereumAddress {
  network: ETHEREUM_NETWORK!
  display: String!
  hex: HexValue!

  balance: EthereumValue!

  transactionCount: Int!
  transactions(
    startBlock: Int
    endBlock: Int
    page: Int
    offset: Int
  ): [EthereumTransaction!]

  contract(interface: EthereumContractInterfaceInput!): EthereumGenericContract

  tokenContract(
    interface: EthereumContractInterfaceInput
  ): EthereumTokenContract

  identityContract(
    interface: EthereumContractInterfaceInput
  ): EthereumIdentityContract
}

type EthereumTransaction {
  network: ETHEREUM_NETWORK!
  hash: EthereumTransactionHashHexValue!
  nonce: Int
  block: EthereumBlock
  transactionIndex: Int
  from: EthereumAddress
  to: EthereumAddress
  value: EthereumValue
  gas: Int
  gasPrice: EthereumValue
  input: HexValue

  gasUsed: Int
  cumulativeGasUsed: Int
  contractAddress: EthereumAddress
  status: Boolean

  logs: [EthereumLog!]!
}

type EthereumBlock {
  network: ETHEREUM_NETWORK!
  hash: EthereumBlockHashHexValue!
  number: Int!
  parent: EthereumBlock
  nonce: HexValue
  sha3Uncles: String
  logsBloom: HexValue
  transactionsRoot: String
  stateRoot: String
  miner: EthereumAddress!
  difficulty: BigNumber
  totalDifficulty: BigNumber
  size: Int
  extraData: HexValue
  gasLimit: Int
  gasUsed: Int
  timestamp: Int
  transactions: [EthereumTransaction!]!
  transactionCount: Int!
  uncles: [EthereumBlock!]!
}

type EthereumLog {
  id: String
  address: EthereumAddress
  topics: [HexValue!]!
  data: HexValue
  logIndex: Int
  removed: Boolean
}

interface EthereumContract {
  address: EthereumAddress!
  method(signature: String!): EthereumContractMethod
}

type EthereumGenericContract implements EthereumContract {
  address: EthereumAddress!
  method(signature: String!): EthereumContractMethod
}

type EthereumTokenContract implements EthereumContract {
  address: EthereumAddress!
  method(signature: String!): EthereumContractMethod

  name: String
  symbol: String
  decimals: Int
  totalSupply: BigNumber
  balance(owner: EthereumAddressString!): BigNumber
  rawBalance(owner: EthereumAddressString!): BigNumber
  owner(tokenId: BigNumber!): EthereumAddress
  allowance(
    owner: EthereumAddressString!
    spender: EthereumAddressString!
  ): BigNumber
}

type EthereumContractMethod {
  call(inputs: [JSON]): JSON
}

type EthereumIdentityContract implements EthereumContract {
  address: EthereumAddress!
  method(signature: String!): EthereumContractMethod

  key(key: HexValue!): EthereumIdentityContractKey
  keyByPurpose(purpose: BigNumber!): [EthereumIdentityContractKey]
}

type EthereumIdentityContractKey {
  key: HexValue!
  keyType: BigNumber!
  purposes: [BigNumber!]!
}

type EthereumValue {
  display(precision: Int): String!

  Gwei: BigNumber!
  Kwei: BigNumber!
  Mwei: BigNumber!
  babbage: BigNumber!
  ether: BigNumber!
  femtoether: BigNumber!
  finney: BigNumber!
  gether: BigNumber!
  grand: BigNumber!
  gwei: BigNumber!
  kether: BigNumber!
  kwei: BigNumber!
  lovelace: BigNumber!
  mether: BigNumber!
  micro: BigNumber!
  microether: BigNumber!
  milli: BigNumber!
  milliether: BigNumber!
  mwei: BigNumber!
  nano: BigNumber!
  nanoether: BigNumber!
  picoether: BigNumber!
  shannon: BigNumber!
  szabo: BigNumber!
  tether: BigNumber!
  wei: BigNumber!
}

type PhoneNumber {
  hashedPhoneNumber: String!
  address: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  ethereumAddress(network: ETHEREUM_NETWORK): EthereumAddress
}

input StartPhoneNumberVerificationInput {
  phoneNumber: String!
}

type StartPhoneNumberVerificationPayload implements Ack {
  ok: Boolean
  message: String
}

input CheckPhoneNumberVerificationInput {
  phoneNumber: String!
  verificationCode: String!
}

type CheckPhoneNumberVerificationPayload implements Ack {
  ok: Boolean
  message: String
  phoneNumber: PhoneNumber
  phoneNumberToken: String
  phoneNumberTokenExpires: DateTime
}

input CheckUsernameAvailableInput {
  username: String!
  network: ETHEREUM_NETWORK
}

type CheckUsernameAvailablePayload implements Ack {
  ok: Boolean
  message: String
}

input CreateIdentityContractInput {
  username: String!
  phoneNumberToken: String!
  managerAddresses: [EthereumAddressString!]!
  network: ETHEREUM_NETWORK
  passphraseRecoveryHash: String
  socialRecoveryAddresses: [EthereumAddressString!]
}

type CreateIdentityContractPayload implements Ack {
  ok: Boolean
  message: String
  identityContract: EthereumIdentityContract
}

input UpdatePhoneNumberInput {
  phoneNumberToken: String!
  address: EthereumAddressString!
}

type UpdatePhoneNumberPayload implements Ack {
  ok: Boolean
  message: String
  phoneNumber: PhoneNumber
}

input DeletePhoneNumberInput {
  phoneNumberToken: String!
}

type DeletePhoneNumberPayload implements Ack {
  ok: Boolean
  message: String
}

input SendRawEthereumTransactionInput {
  data: String!
  network: ETHEREUM_NETWORK
}

type SendRawEthereumTransactionPayload implements Ack {
  ok: Boolean
  message: String
  ethereumTransaction: EthereumTransaction
}

input EthereumContractInterfaceInput {
  standards: [ETHEREUM_CONTRACT_STANDARD!]
  inline: [EthereumContractInterfaceInlineInput!]
}

input EthereumContractInterfaceInlineInput {
  name: String!
  type: String
  inputs: [EthereumContractInterfaceInlineParameterInput!]
  outputs: [EthereumContractInterfaceInlineParameterInput!]
  payable: Boolean
  stateMutability: String
  constant: Boolean
}

input EthereumContractInterfaceInlineParameterInput {
  name: String!
  type: String!
  components: [EthereumContractInterfaceInlineParameterInput!]
  indexed: Boolean
}
