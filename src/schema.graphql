# import PhoneNumber from "./generated/prisma.graphql"

scalar BigNumber
scalar HexValue
scalar EthereumAddressHexValue
scalar EthereumBlockHashHexValue
scalar EthereumTransactionHashHexValue

enum ETHEREUM_NETWORK {
  MAINNET
  ROPSTEN
  KOVAN
  RINKEBY
}

type Query {
  phoneNumber(hashedPhoneNumber: String!): PhoneNumber

  ethereumGasPrice(network: ETHEREUM_NETWORK): EthereumValue

  ethereumBlockNumber(network: ETHEREUM_NETWORK): Int

  ethereumBlock(
    hash: EthereumBlockHashHexValue
    number: Int
    network: ETHEREUM_NETWORK
  ): EthereumBlock

  ethereumTransaction(
    hash: EthereumTransactionHashHexValue!
    network: ETHEREUM_NETWORK
  ): EthereumTransaction

  ethereumAddress(
    hash: EthereumAddressHexValue!
    network: ETHEREUM_NETWORK
  ): EthereumAddress
}

type Mutation {
  startPhoneNumberVerification(input: StartPhoneNumberVerificationInput!): Ack
  updatePhoneNumber(input: UpdatePhoneNumberInput!): UpdatePhoneNumberPayload
  deletePhoneNumber(input: DeletePhoneNumberInput!): Ack

  sendRawEthereumTransaction(
    input: SendRawEthereumTransactionInput!
  ): SendRawEthereumTransactionPayload
}

type Ack {
  ok: Boolean
}

type EthereumAddress {
  network: ETHEREUM_NETWORK!
  hash: EthereumAddressHexValue!
  balance: EthereumValue!

  transactionCount: Int!
  transactions(
    startBlock: Int
    endBlock: Int
    page: Int
    offset: Int
  ): [EthereumTransaction!]
}

type EthereumTransaction {
  network: ETHEREUM_NETWORK!
  hash: EthereumTransactionHashHexValue!
  nonce: Int
  block: EthereumBlock
  transactionIndex: Int
  from: EthereumAddress
  to: EthereumAddress
  value: EthereumValue
  gas: Int
  gasPrice: EthereumValue
  input: HexValue

  gasUsed: Int
  cumulativeGasUsed: Int
  contractAddress: EthereumAddress
  status: Boolean

  logs: [EthereumLog!]!
}

type EthereumBlock {
  network: ETHEREUM_NETWORK!
  hash: EthereumBlockHashHexValue!
  number: Int!
  parent: EthereumBlock
  nonce: HexValue
  sha3Uncles: String
  logsBloom: HexValue
  transactionsRoot: String
  stateRoot: String
  miner: EthereumAddress!
  difficulty: BigNumber
  totalDifficulty: BigNumber
  size: Int
  extraData: HexValue
  gasLimit: Int
  gasUsed: Int
  timestamp: Int
  transactions: [EthereumTransaction!]!
  transactionCount: Int!
  uncles: [EthereumBlock!]!
}

type EthereumLog {
  id: String
  address: EthereumAddress
  topics: [HexValue!]!
  data: HexValue
  logIndex: Int
  removed: Boolean
}

type PhoneNumber {
  hashedPhoneNumber: String!
  address: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  ethereumAddress(network: ETHEREUM_NETWORK): EthereumAddress
}

type EthereumValue {
  Gwei: BigNumber!
  Kwei: BigNumber!
  Mwei: BigNumber!
  babbage: BigNumber!
  ether: BigNumber!
  femtoether: BigNumber!
  finney: BigNumber!
  gether: BigNumber!
  grand: BigNumber!
  gwei: BigNumber!
  kether: BigNumber!
  kwei: BigNumber!
  lovelace: BigNumber!
  mether: BigNumber!
  micro: BigNumber!
  microether: BigNumber!
  milli: BigNumber!
  milliether: BigNumber!
  mwei: BigNumber!
  nano: BigNumber!
  nanoether: BigNumber!
  picoether: BigNumber!
  shannon: BigNumber!
  szabo: BigNumber!
  tether: BigNumber!
  wei: BigNumber!
}

input StartPhoneNumberVerificationInput {
  phoneNumber: String!
}

input UpdatePhoneNumberInput {
  phoneNumber: String!
  verificationCode: String!
  address: String!
}

type UpdatePhoneNumberPayload {
  phoneNumber: PhoneNumber
}

input DeletePhoneNumberInput {
  phoneNumber: String!
  verificationCode: String!
}

input SendRawEthereumTransactionInput {
  data: String!
  network: ETHEREUM_NETWORK
}

type SendRawEthereumTransactionPayload {
  ethereumTransaction: EthereumTransaction
}
